variables:
  GC_ENABLE_BOOTSTRAP: "true"
  GC_SERVICE: partition
  GC_VENDOR: gc
  GC_HELM_ENV_DIR: "devops/gc/tests/env"
  ENV_BUILD_PATH: "devops/gc/tests/build/Dockerfile"

download_gc_plugins:
  image: maven:3.8.3-openjdk-17-slim
  stage: build
  variables:
    GC_OSM_PACKAGE_REGISTRY_URL: "https://community.opengroup.org/api/v4/projects/1476/packages/maven"
    GC_OSM_VERSION: "0.27.0-rc7"
  artifacts:
    paths:
      - ./tmp-gc/*.jar
    when: always
    expire_in: 1 days
  script:
    - mvn dependency:copy -DrepoUrl=$GC_OSM_PACKAGE_REGISTRY_URL -Dartifact="org.opengroup.osdu:gc-osm-datastore:$GC_OSM_VERSION:jar:plugin" -Dtransitive=false -DoutputDirectory="./tmp-gc"
  only:
    variables:
      - $GC == '1'

gc-containerize-gitlab:
  needs: ["gc-compile-and-unit-test", "download_gc_plugins"]

gc-containerize-gcr:
  needs: ["gc-compile-and-unit-test", "download_gc_plugins"]

gc-deploy: # reuse common deploy job for test deployment
  variables:
    GC_HELM_NAMESPACE: partition-int-test
    GC_HELM_SETS: >-
      --set global.dataPartitionId=test
      --set data.partitionNamespace=partition-test
      --set istio.sidecarInject=false
      --set data.edsEnabled=true
      --set data.databaseId=\(default\)
      --set data.elasticHttps=true
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL

gc-test:
  variables:
    CLIENT_TENANT: test
    PARTITION_BASE_URL: https://test.community.gcp.gnrg-osdu.projects.epam.com/

gc-cleanup-env: # clean-up env after tests
  environment:
    name: Google_Cloud
  stage: cleanup
  extends: .gc-variables
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/projects/${GC_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GC_POOL_ID}/providers/${GC_PROVIDER_ID}
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  needs: ["gc-test"]
  tags: ["osdu-small"]
  variables:
    PARTITION_NAMESPACE: partition-test
    GC_HELM_NAMESPACE: partition-int-test
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
    PIP_BREAK_SYSTEM_PACKAGES: 1
  script:
    - !reference [.gc_obtain_credentials, script]
    - !reference [.gc_common_config, script]
    - chmod +x devops/gc/tests/clean_up/clean_up.sh && devops/gc/tests/clean_up/clean_up.sh --all
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release/"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$GC == "1"'
      when: always

gc-verified-deploy: # verified deploy after tests
  extends: gc-deploy
  stage: verified-deploy
  needs: ["gc-test"]
  variables:
    GC_HELM_NAMESPACE: default
    GC_TENANT: osdu
    # GC_HELM_SETS is blanked since values from gc-deploy is not compatible
    GC_HELM_SETS: >-
      --set data.edsEnabled=true
      --set data.databaseId=\(default\)
      --set data.elasticHttps=false

# Dev2 jobs
gc-dev2-deploy: # reuse common deploy job for test deployment
  variables:
    GC_HELM_NAMESPACE: partition-int-test
    GC_HELM_SETS: >-
      --set global.dataPartitionId=test
      --set data.partitionNamespace=partition-test
      --set istio.sidecarInject=false
      --set data.edsEnabled=true
      --set data.databaseId=\(default\)
      --set data.elasticHttps=false
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL

gc-dev2-test:
  variables:
    CLIENT_TENANT: test
    PARTITION_BASE_URL: https://test.dev2.gcp.gnrg-osdu.projects.epam.com/

gc-dev2-cleanup-env: # clean-up env after tests
  environment:
    name: GC_Dev2
  stage: cleanup
  extends: .gc-dev2-variables
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://iam.googleapis.com/projects/${GC_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GC_POOL_ID}/providers/${GC_PROVIDER_ID}
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  needs: [gc-dev2-test]
  tags: ["osdu-small"]
  variables:
    PARTITION_NAMESPACE: partition-test
    GC_HELM_NAMESPACE: partition-int-test
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
    PIP_BREAK_SYSTEM_PACKAGES: 1
  script:
    - !reference [.gc_obtain_credentials, script]
    - !reference [.gc_common_config, script]
    - chmod +x devops/gc/tests/clean_up/clean_up.sh && devops/gc/tests/clean_up/clean_up.sh --all
  rules:
    - if: '$GC == "1" && $CI_COMMIT_BRANCH =~ /^release/'
      when: always
    - if: '$GC == "1" && $CI_COMMIT_TAG'
      when: always

gc-dev2-verified-deploy: # verified deploy after tests
  extends: gc-dev2-deploy
  stage: verified-deploy
  needs: ["gc-dev2-test"]
  retry: 1
  variables:
    GC_SA_EMAIL: $GC_SA_GKE_EMAIL
    GC_HELM_NAMESPACE: default
    GC_TENANT: devtwo
    GC_HELM_SETS: >-
      --set data.edsEnabled=true
      --set data.databaseId=\(default\)
      --set data.elasticHttps=false

gc-preship-deploy:
  extends: .gc-preship-variables
  tags: ["osdu-small"]
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  stage: deploy_preship
  needs: ["gc-dev2-verified-deploy", "gc-dev2-test"]
  variables:
    GC_HELM_SETS: >-
      --set data.edsEnabled=true
      --set data.databaseId=\(default\)
      --set data.elasticHttps=false
